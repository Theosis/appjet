var dlog = {}

/**
 * @fileOverview <p>Library for writing to and accessing a debug log. Each log entry has a date, some identifying information, a severity, and a message body.</p> <p>Exceptions that cause requests to fail are automatically logged at severity level FATAL.</p><p>Limits: Currently only the most recent 1000-1500 messages are stored, and bodies may be up to 1k in length.</p>
 *
 * @example
import("dlog");

dlog.info("request from IP: ", request.clientAddr);
dlog.info("request path is: ", request.path);

if (somethingBad()) {
  dlog.warn("something bad happened");
}
 *
 */

/**
 * Severity level FATAL.
 * @type number
 */
dlog.FATAL        = 0;
/**
 * Severity level ERROR.
 * @type number
 */
dlog.ERROR        = 1;
/**
 * Severity level WARN.
 * @type number
 */
dlog.WARN         = 2;
/**
 * Severity level INFO.
 * @type number
 */
dlog.INFO         = 3;

/**
 * @ignore
 */
function _doLog(severity, messages) {
  var output = "";
  messages.forEach(function(message) {
    output += toHTML(message);
  });

  appjet._native.debug_log(severity, output);
}


/**
 * <p>Writes a message of the given severity to the debug log. In addition to the severity and message text, the debug log also tracks: the time the message is logged; the ID of the request that generated the message; and the type (preview, published, or shell) of the request that generated the message.</p>
 *
 * @param {number} severity The severity of the message.
 * @param {*} message The message to log.
 * @param {*} etc ...
 */
dlog.log = function(severity, message, etc) {
  if (typeof(severity) != 'number')
    throw new TypeError("Specify log message severity as a number.");
  var args = Array.prototype.slice.call(arguments, 1);
  _doLog(severity, args);
}

/**
 * <p>Logs a fatal message. "Fatal" is generally used to indicate that execution cannot continue.</p>
 *
 * @param {*} message The message to log.
 * @param {*} etc ...
 */
dlog.fatal = function(message, etc) {
  _doLog(dlog.FATAL, Array.prototype.slice.call(arguments));
}

/**
 * <p>Logs an error message. "Error" is generally used when something bad and unexpected has happened.</p>
 *
 * @param {*} message The message to log.
 * @param {*} etc ...
 */
dlog.error = function(message, etc) {
  _doLog(dlog.ERROR, Array.prototype.slice.call(arguments));
}

/**
 * <p>Logs a warning message. "Warn" is generally used when something unexpected happened - perhaps a harbinger of greater errors to come.</p>
 *
 * @param {*} message The message to log.
 * @param {*} etc ...
 */
dlog.warn = function(message, etc) {
  _doLog(dlog.WARN, Array.prototype.slice.call(arguments));
}

/**
 * <p>Logs an info message. "Info" is generally used to note that something interesting has happened.</p>
 *
 * @param {*} message The message to log.
 * @param {*} etc ...
 */
dlog.info = function(message, etc) {
  _doLog(dlog.INFO, Array.prototype.slice.call(arguments));
}

/**
 * <p>Provides programmatic access to the debug log's messages (for making your own dashboard, perhaps?).</p>
 *
 * <p>The returned objects have fields that correspond to all recorded information about the message, namely:</p>
 *
 * <ul>
 * <li><strong>date:</strong> the message's date, in milliseconds since the epoch (UNIX time), suitable for passing to the Date constructor.</li>
 * <li><strong>requestId:</strong> the ID of the request that logged this message.</li>
 * <li><strong>requestType:</strong> the type of the request that logged this message ("preview", "published", or "shell").</li>
 * <li><strong>severity:</strong> the severity of the message.</li>
 * <li><strong>message:</strong> the logged message text.</li>
 * </ul>
 *
 * @param {object} [params] Optional object with the following six optional properties:
 * @param {number} [params.howOld] How far back (in milliseconds) to access logged messages. Default: 1 hour.
 * @param {string} [params.idFilter] Only show messages created with this request ID. Default: no rescriction.
 * @param {boolean} [params.preview] <strong>true</strong> to show messages generated from preview requests. Default: true.
 * @param {boolean} [params.published] <strong>true</strong> to show messages generated from requests to the published app. Default: true.
 * @param {boolean} [params.shell] <strong>true</strong> to show messages generated by the shell. Default: false.
 * @param {number} [params.maxSeverity] The least severe message severity to show (all messages with a severity level <em>more</em> or equally severe will be returned). Default: 4.
 *
 * @return {array} An array of objects describing the logged messages.
 */
dlog.messages = function(params) {
  if (! params) params = {};
  if (params.preview === undefined)
    params.preview = true;
  if (params.published === undefined)
    params.published = true;

  return appjet._native.debug_messages(
    params.howOld || 3600000,
    params.idFilter || "",
    params.preview | (params.published << 1) | (params.shell << 2),
    params.maxSeverity || 4);
}

/**
 * <p>Clears the debug log.</p>
 */
dlog.clear = function() {
  appjet._native.debug_clear();
}
