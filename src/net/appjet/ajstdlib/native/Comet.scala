package net.appjet.ajstdlib.native;

import net.appjet.fancypants.{AppVMHandler, dprintln, config, RequestState, AppType, FancyPantsServlet};
import net.appjet.appvm.AppVM;
import net.appjet.appvm.AppVM.{JSArray, JSString, JSBoolean};

import org.mortbay.cometd.continuation.ContinuationCometdServlet;
import org.mortbay.jetty.servlet.{ServletHolder, Context};
import org.mortbay.jetty.Handler;
import org.mortbay.util.ajax.JSON;

import java.util.Map;

import net.appjet.common.util.HttpServletRequestFactory;

import dojox.cometd.{Client, Listener, Message, Bayeux};

import scala.collection.mutable.{HashMap, HashSet};
import scala.collection.jcl.Conversions;

class AppCometState(state: RequestState) {
  val servlet = new ContinuationCometdServlet();
  val holder = new ServletHolder(servlet);
  holder.setInitParameter("timeout", "240000"); // default is 240000
  holder.setInitParameter("interval","0");
  holder.setInitParameter("maxInterval","30000");
  holder.setInitParameter("multiFrameInterval","1500");
  holder.setInitParameter("JSONCommented","true");
  holder.setInitParameter("logLevel","1");
  val context = new Context(null, "/");
  context.addServlet(holder, "/cometd/*");
  context.start();

  val bayeux = servlet.getBayeux();
  val subs = new HashSet[String]();
 
  val client = bayeux.newClient("", new Listener() {
    override def deliver(fromClient: Client, toClient: Client, msg: Message) {
      dprintln("COMET: received message "+msg+" from "+fromClient+" to "+toClient);
      val headers = Conversions.convertMap(new java.util.HashMap[String, String]());
      if (msg.get(Bayeux.DATA_FIELD).asInstanceOf[Map[String,_]].containsKey("X-Autogenerated-Request-TTL"))
	headers("X-Autogenerated-Request-TTL") = msg.get(Bayeux.DATA_FIELD).asInstanceOf[Map[String,_]].get("X-Autogenerated-Request-TTL").asInstanceOf[String];
      headers("X-Comet-Request-Channel") = msg.get(Bayeux.CHANNEL_FIELD).asInstanceOf[String];
      headers("X-Comet-Request-Client") = fromClient.getId.asInstanceOf[String];
      headers("X-Comet-Request-Id") = msg.get(Bayeux.ID_FIELD).asInstanceOf[String];
      state.data.context.getAttribute("mainServlet").asInstanceOf[FancyPantsServlet].execute(
	HttpServletRequestFactory.createRequest(
	  "http://"+state.data.appName+"."+config.maindomain+msg.get(Bayeux.CHANNEL_FIELD).asInstanceOf[String]+
	  "?message="+java.net.URLEncoder.encode(JSON.toString(msg)),
	  headers.underlying, "COMET", null),
	HttpServletRequestFactory.createResponse());
    }
    override def removed(clientId: String, timeout: Boolean) {
      dprintln("COMET: removed "+clientId+"; timeout="+timeout);
    }
  }); 
}

object CometService {
  val states = new HashMap[(Int, boolean), AppCometState]();
  
  def comet(state: RequestState) = synchronized {
    val key = (state.data.appId, state.data.appType == AppType.Published);
    if (! states.contains(key))
      states(key) = new AppCometState(state);
    states(key);
  }

  def js_comet_intercept(env: AppVM.Env) {
    val state = AppVMHandler.runningRequests(env.requestId);
    if (state.path.startsWith("/cometd")) {
      state.addCommitter(Unit => {
	var c = comet(state)
	dprintln("COMET: passing control to comet servlet.");      
	c.context.handle(state.path, state.req, state.res, Handler.FORWARD);
	dprintln("COMET: received control back from comet servlet.");
      })
      env.stopExecution
    }
  }

  def js_comet_subscribe(env: AppVM.Env, channel: String) {
    val state = AppVMHandler.runningRequests(env.requestId);
    val c = comet(state);
    val b = c.bayeux;

    state.addCommitter(Unit => {
      b.subscribe(channel, c.client);
      c.subs += channel;
    });
  }

  def js_comet_unsubscribe(env: AppVM.Env, channel: String) {
    val state = AppVMHandler.runningRequests(env.requestId);
    val c = comet(state);

    state.addCommitter(Unit => {
      c.client.unsubscribe(channel);
      c.subs -= channel;
    });
  }

  def js_comet_publish(env: AppVM.Env, channel: String, obj: JSArray, id: String) {
    val state = AppVMHandler.runningRequests(env.requestId);
    val c = comet(state);

    dprintln("COMET: "+state.data.appName+":"+channel+" published "+obj);

    state.addCommitter(Unit => {
      c.bayeux.publish(c.client, channel, {val m = util.kvsToMap(obj); m.put("X-Autogenerated-Request-TTL", (state.depth-1).toString()); m}, id);
    });
  }

  def js_comet_subscriptions(env: AppVM.Env): JSArray = {
    val state = AppVMHandler.runningRequests(env.requestId);
    val c = comet(state);
    
    val arr = env.newArray;
    var i = 0;
    c.subs.foreach(s => {
      arr.setElement(i, JSString(s));
      i += 1;
    });
    arr;
  }    
  
  def js_comet_isSubscribed(env: AppVM.Env, channel: String): JSBoolean = {
    val state = AppVMHandler.runningRequests(env.requestId);
    JSBoolean(comet(state).subs.contains(channel));
  }

  def js_comet_clientIDs(env: AppVM.Env): JSArray = {
    val state = AppVMHandler.runningRequests(env.requestId);
    val c = comet(state);

    val arr = env.newArray;
    var i = 0;
    Conversions.convertSet(c.bayeux.getClientIDs()).foreach(s => {
      arr.setElement(i, JSString(s.asInstanceOf[String]));
      i += 1;
    });
    arr;
  }
    
}
